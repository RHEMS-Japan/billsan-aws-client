Mappings:
  DataExports:
    CUR2:
      DefaultQuery: SELECT bill_bill_type, bill_billing_entity,
        bill_billing_period_end_date, bill_billing_period_start_date,
        bill_invoice_id, bill_invoicing_entity, bill_payer_account_id,
        bill_payer_account_name, cost_category, discount,
        discount_bundled_discount, discount_total_discount,
        identity_line_item_id, identity_time_interval,
        line_item_availability_zone, line_item_blended_cost,
        line_item_blended_rate, line_item_currency_code, line_item_legal_entity,
        line_item_line_item_description, line_item_line_item_type,
        line_item_net_unblended_cost, line_item_net_unblended_rate,
        line_item_normalization_factor, line_item_normalized_usage_amount,
        line_item_operation, line_item_product_code, line_item_resource_id,
        line_item_tax_type, line_item_unblended_cost, line_item_unblended_rate,
        line_item_usage_account_id, line_item_usage_account_name,
        line_item_usage_amount, line_item_usage_end_date,
        line_item_usage_start_date, line_item_usage_type, pricing_currency,
        pricing_lease_contract_length, pricing_offering_class,
        pricing_public_on_demand_cost, pricing_public_on_demand_rate,
        pricing_purchase_option, pricing_rate_code, pricing_rate_id,
        pricing_term, pricing_unit, product, product_comment, product_fee_code,
        product_fee_description, product_from_location,
        product_from_location_type, product_from_region_code,
        product_instance_family, product_instance_type, product_instancesku,
        product_location, product_location_type, product_operation,
        product_pricing_unit, product_product_family, product_region_code,
        product_servicecode, product_sku, product_to_location,
        product_to_location_type, product_to_region_code, product_usagetype,
        reservation_amortized_upfront_cost_for_usage,
        reservation_amortized_upfront_fee_for_billing_period,
        reservation_availability_zone, reservation_effective_cost,
        reservation_end_time, reservation_modification_status,
        reservation_net_amortized_upfront_cost_for_usage,
        reservation_net_amortized_upfront_fee_for_billing_period,
        reservation_net_effective_cost, reservation_net_recurring_fee_for_usage,
        reservation_net_unused_amortized_upfront_fee_for_billing_period,
        reservation_net_unused_recurring_fee, reservation_net_upfront_value,
        reservation_normalized_units_per_reservation,
        reservation_number_of_reservations, reservation_recurring_fee_for_usage,
        reservation_reservation_a_r_n, reservation_start_time,
        reservation_subscription_id,
        reservation_total_reserved_normalized_units,
        reservation_total_reserved_units, reservation_units_per_reservation,
        reservation_unused_amortized_upfront_fee_for_billing_period,
        reservation_unused_normalized_unit_quantity,
        reservation_unused_quantity, reservation_unused_recurring_fee,
        reservation_upfront_value, resource_tags,
        savings_plan_amortized_upfront_commitment_for_billing_period,
        savings_plan_end_time, savings_plan_instance_type_family,
        savings_plan_net_amortized_upfront_commitment_for_billing_period,
        savings_plan_net_recurring_commitment_for_billing_period,
        savings_plan_net_savings_plan_effective_cost,
        savings_plan_offering_type, savings_plan_payment_option,
        savings_plan_purchase_term,
        savings_plan_recurring_commitment_for_billing_period,
        savings_plan_region, savings_plan_savings_plan_a_r_n,
        savings_plan_savings_plan_effective_cost,
        savings_plan_savings_plan_rate, savings_plan_start_time,
        savings_plan_total_commitment_to_date, savings_plan_used_commitment FROM
        COST_AND_USAGE_REPORT
    Focus:
      DefaultQuery: SELECT AvailabilityZone, BilledCost, BillingAccountId,
        BillingAccountName, BillingCurrency, BillingPeriodEnd,
        BillingPeriodStart, ChargeCategory, ChargeClass, ChargeDescription,
        ChargeFrequency, ChargePeriodEnd, ChargePeriodStart,
        CommitmentDiscountCategory, CommitmentDiscountId,
        CommitmentDiscountName, CommitmentDiscountStatus,
        CommitmentDiscountType, ConsumedQuantity, ConsumedUnit, ContractedCost,
        ContractedUnitPrice, EffectiveCost, InvoiceIssuerName, ListCost,
        ListUnitPrice, PricingCategory, PricingQuantity, PricingUnit,
        ProviderName, PublisherName, RegionId, RegionName, ResourceId,
        ResourceName, ResourceType, ServiceCategory, ServiceName, SkuId,
        SkuPriceId, SubAccountId, SubAccountName, Tags, x_CostCategories,
        x_Discounts, x_Operation, x_ServiceCode, x_UsageType FROM FOCUS_1_0_AWS
    COH:
      DefaultQuery: SELECT account_id, action_type, currency_code, current_resource_details, current_resource_summary, current_resource_type, estimated_monthly_cost_after_discount, estimated_monthly_cost_before_discount, estimated_monthly_savings_after_discount, estimated_monthly_savings_before_discount, estimated_savings_percentage_after_discount, estimated_savings_percentage_before_discount, implementation_effort, last_refresh_timestamp, recommendation_id, recommendation_lookback_period_in_days, recommendation_source, recommended_resource_details, recommended_resource_summary, recommended_resource_type, region, resource_arn, restart_needed, rollback_possible, tags
        FROM COST_OPTIMIZATION_RECOMMENDATIONS

Parameters:
  SlackWebhookURL:
    Type: String
    Description: "Slack Webhook URL"
    AllowedPattern: "^https://hooks.slack.com/services/.*"
    ConstraintDescription: "Slack Webhook URL must start with 'https://hooks.slack.com/services/'"

Resources:

  #1: S3 Bucket to save all billing data export data
  DataExportBucketCreateExec:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateBucketFunction.Arn
      ServiceTimeout: 60

  #2: Lambda function to create S3 bucket if it doesn't exist
  CreateBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates S3 bucket if it doesn't exist
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt CreateBucketRole.Arn
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Sub billsan-aws-${AWS::AccountId}
          SLACK_WEBHOOK_URL: !Sub ${SlackWebhookURL}
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p312-requests:11  # include requests
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          import os
          import requests

          def send_slack_notification(message):
            webhook_url = os.environ['SLACK_WEBHOOK_URL']
            print(f"Webhook URL: {webhook_url}")
            slack_data = {'text': message}
            response = requests.post(
              webhook_url, data=json.dumps(slack_data),
              headers={'Content-Type': 'application/json'}
            )
            if response.status_code != 200:
              raise ValueError(
                'Request to slack returned an error %s, the response is:\n%s'
                % (response.status_code, response.text)
              )

          def get_account_id():
            sts = boto3.client('sts')
            return sts.get_caller_identity()["Account"]

          def handler(event, context):
            reason = ""
            print(json.dumps(event))
            status = cfnresponse.SUCCESS
            account_id = get_account_id()
            region = 'us-east-1'

            try:
              if event['RequestType'] == 'Create':
                s3 = boto3.client('s3')
                bucket_name = os.environ['BUCKET_NAME']
                print(f"Creating bucket {bucket_name} in account {account_id}")
                response = s3.list_buckets()
                buckets = [bucket['Name'] for bucket in response['Buckets']]
                if bucket_name not in buckets:
                  s3.create_bucket(Bucket=bucket_name)
                  s3.put_public_access_block(
                    Bucket=bucket_name,
                    PublicAccessBlockConfiguration={
                      'IgnorePublicAcls': True,
                      'RestrictPublicBuckets': True
                    }
                  )
                  # ライフサイクルルールを追加
                  lifecycle_configuration = {
                    'Rules': [
                      {
                        'ID': 'DeleteNonCurrentVersionsAfterOneYear',
                        'Status': 'Enabled',
                        'Filter': {
                          'Prefix': ''
                        },
                        'NoncurrentVersionExpiration': {
                          'NoncurrentDays': 365
                        }
                      }
                    ]
                  }
                  s3.put_bucket_lifecycle_configuration(
                    Bucket=bucket_name,
                    LifecycleConfiguration=lifecycle_configuration
                  )
                  print(f"Lifecycle rule added to bucket {bucket_name}")
                  print(f"Bucket {bucket_name} created.")
                  send_slack_notification(f"S3 Bucket {bucket_name} created successfully.")
                else:
                  print(f"Bucket {bucket_name} already exists. Skipping creation.")
                  send_slack_notification(f"S3 Bucket {bucket_name} already exists. Skipping creation.")
              else:
                print("RequestType is not Create. No action required.")
            except Exception as e:
              reason = str(e)
              print(f"Exception occurred in account {account_id}: {e}")
              send_slack_notification(f"Exception occurred in account {account_id}: {e}")
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, reason)
  #3: IAM role for CreateBucketFunction 
  CreateBucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambda-createbucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListAllMyBuckets
                  - s3:CreateBucket
                  - s3:PutBucketPublicAccessBlock 
                  - s3:PutLifecycleConfiguration 
                Resource: "*"

  #4  #1 S3 Bucket Policy for allow data export
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: DataExportBucketCreateExec
    Properties:
      Bucket: !Sub billsan-aws-${AWS::AccountId}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnableAWSDataExportsToWriteToS3AndCheckPolicy
            Effect: Allow
            Principal:
              Service:
                - billingreports.amazonaws.com
                - bcm-data-exports.amazonaws.com
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
            Resource:
              - !Sub arn:aws:s3:::billsan-aws-${AWS::AccountId}
              - !Sub arn:aws:s3:::billsan-aws-${AWS::AccountId}/*
            Condition:
              StringLike:
                aws:SourceArn:
                  - !Sub arn:aws:cur:${AWS::Region}:${AWS::AccountId}:definition/*
                  - !Sub arn:aws:bcm-data-exports:${AWS::Region}:${AWS::AccountId}:export/*
                aws:SourceAccount:
                  - !Sub ${AWS::AccountId}
          - Sid: AllowFromExternalAccount
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::063150541913:role/RHEMS-Google-Workspace-admin
                - arn:aws:iam::063150541913:role/RHEMS-Google-Workspace-readonly
                - arn:aws:iam::063150541913:role/BillSan
            Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
            Resource:
              - !Sub arn:aws:s3:::billsan-aws-${AWS::AccountId}
              - !Sub arn:aws:s3:::billsan-aws-${AWS::AccountId}/*

  ####################################
  ### Focus 1.0
  ####################################
  #5 Deploy Data Export for Focus parquet
  BillingDataExportFocusParquet:
    Type: AWS::BCMDataExports::Export
    DependsOn: S3BucketPolicy
    Properties:
      Export:
        Name: !Sub billsan-aws-${AWS::AccountId}-focus-parquet
        RefreshCadence:
          Frequency: SYNCHRONOUS
        DataQuery:
          QueryStatement: !FindInMap
            - DataExports
            - Focus
            - DefaultQuery
        DestinationConfigurations:
          S3Destination:
            S3Bucket: !Sub billsan-aws-${AWS::AccountId}
            S3Region: !Sub ${AWS::Region}
            S3Prefix: focus/parquet
            S3OutputConfigurations:
              Compression: PARQUET
              Format: PARQUET
              OutputType: CUSTOM
              Overwrite: OVERWRITE_REPORT
  
  #6 Deploy Data Export for Focus CSV
  BillingDataExportFocusCSV:
    Type: AWS::BCMDataExports::Export
    DependsOn: S3BucketPolicy
    Properties:
      Export:
        Name: !Sub billsan-aws-${AWS::AccountId}-focus-csv
        RefreshCadence:
          Frequency: SYNCHRONOUS
        DataQuery:
          QueryStatement: !FindInMap
            - DataExports
            - Focus
            - DefaultQuery
        DestinationConfigurations:
          S3Destination:
            S3Bucket: !Sub billsan-aws-${AWS::AccountId}
            S3Region: !Sub ${AWS::Region}
            S3Prefix: focus/csv
            S3OutputConfigurations:
              Compression: GZIP
              Format: TEXT_OR_CSV
              OutputType: CUSTOM
              Overwrite: OVERWRITE_REPORT
  
  
  ####################################
  ### CUR 2.0
  ####################################
  #7 Deploy Data Export for CUR 2.0 parquet
  BillingDataExportCUR2Parquet:
    Type: AWS::BCMDataExports::Export
    DependsOn: S3BucketPolicy
    Properties:
      Export:
        DataQuery:
          QueryStatement: !FindInMap
            - DataExports
            - CUR2
            - DefaultQuery
          TableConfigurations:
            COST_AND_USAGE_REPORT:
              TIME_GRANULARITY: HOURLY
              INCLUDE_RESOURCES: 'TRUE'
              INCLUDE_MANUAL_DISCOUNT_COMPATIBILITY: 'FALSE'
              INCLUDE_SPLIT_COST_ALLOCATION_DATA: 'FALSE'
        Description: CUR 2.0 export for aggregation in CID
        DestinationConfigurations:
          S3Destination:
            S3Bucket: !Sub billsan-aws-${AWS::AccountId}
            S3Region: !Sub ${AWS::Region}
            S3Prefix: cur2.0/parquet
            S3OutputConfigurations:
              Overwrite: OVERWRITE_REPORT
              Format: PARQUET
              Compression: PARQUET
              OutputType: CUSTOM
        Name: !Sub billsan-aws-${AWS::AccountId}-cur2-parquet
        RefreshCadence:
          Frequency: SYNCHRONOUS
  
  #8 Deploy Data Export for CUR 2.0 CSV
  BillingDataExportCUR2CSV:
    Type: AWS::BCMDataExports::Export
    DependsOn: S3BucketPolicy
    Properties:
      Export:
        DataQuery:
          QueryStatement: !FindInMap
            - DataExports
            - CUR2
            - DefaultQuery
          TableConfigurations:
            COST_AND_USAGE_REPORT:
              TIME_GRANULARITY: HOURLY
              INCLUDE_RESOURCES: 'TRUE'
              INCLUDE_MANUAL_DISCOUNT_COMPATIBILITY: 'FALSE'
              INCLUDE_SPLIT_COST_ALLOCATION_DATA: 'FALSE'
        Description: CUR 2.0 export for aggregation in CID
        DestinationConfigurations:
          S3Destination:
            S3Bucket: !Sub billsan-aws-${AWS::AccountId}
            S3Region: !Sub ${AWS::Region}
            S3Prefix: cur2.0/csv
            S3OutputConfigurations:
              Overwrite: OVERWRITE_REPORT
              Format: TEXT_OR_CSV
              Compression: GZIP
              OutputType: CUSTOM
        Name: !Sub billsan-aws-${AWS::AccountId}-cur2-csv
        RefreshCadence:
          Frequency: SYNCHRONOUS
